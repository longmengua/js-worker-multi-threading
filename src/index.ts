import { Worker } from 'worker_threads';
import { resolve } from 'path';

const raceLength = 100; // ÊØîË≥ΩË∑ùÈõ¢
const sharedBuffer = new SharedArrayBuffer(4); // ÂÖ±‰∫´ËÆäÊï∏
const raceOverFlag = new Int32Array(sharedBuffer);
raceOverFlag[0] = 0; // ÂàùÂßãÂåñÊØîË≥ΩÁµêÊùüÊ®ôË™å

const players = [
    { name: 'Ôº°' },
    { name: 'Ôº¢' },
    { name: 'Ôº£' }
];

console.log("üèÅ ÊØîË≥ΩÈñãÂßãÔºÅ");

players.forEach(horse => {
    const workerFile = resolve(__dirname, './workers/race.js'); // Reference JavaScript file
    const worker = new Worker(workerFile, {
        workerData: { name: horse.name, raceLength, sharedBuffer }
    });

    worker.on('message', (message) => {
        const { name, distance } = message;

        if (Atomics.load(raceOverFlag, 0) === 1) {
            return; // ÊØîË≥ΩÂ∑≤Á∂ìÁµêÊùü
        }

        if (distance == 100) {
            console.log(`üèÜ ${name} Ë¥èÂæóÊØîË≥ΩÔºÅ`);
            Atomics.store(raceOverFlag, 0, 1); // Ë®≠ÁΩÆÊØîË≥ΩÁµêÊùüÊ®ôË™å
        } else {
            console.log(`üöÄ ${name} Ë∑ë‰∫Ü ${distance} ÂÖ¨Â∞∫`);
        }
    });

    worker.on('error', (err) => {
        console.error(`‚ùå Worker error: ${err.message}`);
    });

    worker.on('exit', (code) => {
        if (code !== 0) {
            console.error(`‚ùå Worker stopped with exit code ${code}`);
        }
    });
});

import { Worker } from 'worker_threads';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const raceLength = 100; // ÊØîË≥ΩË∑ùÈõ¢
const sharedBuffer = new SharedArrayBuffer(4); // ÂÖ±‰∫´ËÆäÊï∏
const raceOverFlag = new Int32Array(sharedBuffer);
raceOverFlag[0] = 0; // ÂàùÂßãÂåñÊØîË≥ΩÁµêÊùüÊ®ôË™å

const horses = [
    { name: 'ÈªëÈ¢®' },
    { name: 'È¢®Êö¥' },
    { name: 'ÈñÉÈõª' }
];

console.log("üèÅ ÊØîË≥ΩÈñãÂßãÔºÅ");

horses.forEach(horse => {
    const worker = new Worker(path.resolve(__dirname, './workers/hourseRace.js'), {
        workerData: { name: horse.name, raceLength, sharedBuffer }
    });

    worker.on('message', (message) => {
        if (message.winner) {
            console.log(`üèÜ ${message.winner} Ë¥èÂæóÊØîË≥ΩÔºÅ`);
            Atomics.store(raceOverFlag, 0, 1); // Ë®≠ÁΩÆÊØîË≥ΩÁµêÊùüÊ®ôË™å
        } else {
            console.log(`üöÄ ${message.name} Ë∑ë‰∫Ü ${message.distance} ÂÖ¨Â∞∫`);
        }
    });

    worker.on('error', (err) => {
        console.error(`‚ùå Worker error: ${err.message}`);
    });

    worker.on('exit', (code) => {
        if (code !== 0) {
            console.error(`‚ùå Worker stopped with exit code ${code}`);
        }
    });
});
